from enum import Enum
from datetime import datetime


class Map(Enum):
    THE_CARNIVAL = "–ö–∞—Ä–Ω–∞–≤–∞–ª"
    EAGLETON_SPRINGS = "–ò–≥–ª—Ç–æ–Ω –°–ø—Ä–∏–Ω–≥—Å"
    BLOODHAVEN = "–ö—Ä–æ–≤–∞–≤–∞—è –ì–∞–≤–∞–Ω—å"
    ANCIENT_SANDS = "–î—Ä–µ–≤–Ω—è—è –ü—É—Å—Ç—ã–Ω—è"
    THE_BASEMENT = "–ü–æ–¥–≤–∞–ª"
    JUNGLE_TEMPLE = "–•—Ä–∞–º –î–∂—É–Ω–≥–ª–µ–π"
    GOOSECHAPEL = "–ì—É—Å—á—ç–ø–ª"
    MALLARD_MANOR = "–£—Å–∞–¥—å–±–∞ –ö—Ä—è–∫–≤"
    NEXUS_COLONY = "–ö–æ–ª–æ–Ω–∏—è –ù–µ–∫—Å—É—Å"
    BLACK_SWAN = "–ß–µ—Ä–Ω—ã–π –õ–µ–±–µ–¥—å"
    SS_MOTHER_GOOSE = "–ö.–ö. –ú–∞—Ç—É—à–∫–∞ –ì—É—Å—ã–Ω—è"
    OTHER = "–†–∞–∑–Ω—ã–µ"


class GameMode(Enum):
    CLASSIC = "Classic"
    DRAFT = "Draft"
    CORRUPTION_MODE = "Corruption Mode"
    GOOSE_HUNT = "Goose Hunt"
    DINE_AND_DASH = "Dine and Dash"
    TRICK_OR_TREAT = "Trick or Treat"
    HANGING_OUT = "Hanging Out"
    TASTES_LIKE_CHICKEN = "Tastes Like Chicken"
    WOW_AND_LOCK = "–£—Ö –∏ –∏—â–∏"
    OTHER = "–†–∞–∑–Ω—ã–µ"


class ChooseEditEnum(Enum):
    code = "–ö–æ–¥"
    host = "–•–æ—Å—Ç–∞"
    map = "–ö–∞—Ä—Ç—É"
    game_mode = "–†–µ–∂–∏–º"


class AnswerEnum(Enum):
    we_have_cancel = "–£ –Ω–∞—Å –æ—Ç–º–µ–Ω–∞!"
    error_code = "<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.</b> \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 7-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"
    error_host = "<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.</b> \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤):"
    choose_code = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"
    choose_host = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:"
    choose_map = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:"
    choose_game_mode = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:"
    choose_edit = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
    choose_room = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:"
    info_added_room = "–ö–æ–º–Ω–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    not_found = "–£–≤—ã... –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–Ω–∞—Ç—ã üò¢"
    not_found_rooms = "–£–ø—Å...\n\n–ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç üò¢"
    success_edit = "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã!"
    error_edit = "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å üò¢"
    room_delite = "–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞."
    room_delite_plus = "–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é."
    invalid_option = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
    you_dont_have_root = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."


class QueryCommand(Enum):
    subscribe = "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    unsubscribe = "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"


class Chat:
    def __init__(self, chat_id: int):
        self.chat_id = chat_id

    def to_dict(self):
        return {
            'chat_id': self.chat_id
        }

    @classmethod
    def from_dict(cls, data):
        if data is None:
            raise ValueError("Cannot create Chat from None")

        return cls(
            chat_id=data['chat_id']
        )


class Rating:
    def __init__(self, rating: bool, user_id: int):
        self.rating = rating
        self.user_id = user_id

    def to_dict(self):
        return {
            'rating': self.rating,
            'user_id': self.user_id
        }

    @classmethod
    def from_dict(cls, data):
        if data is None:
            raise ValueError("Cannot create Rating from None")

        return cls(
            rating=data['rating'],
            user_id=data['user_id']
        )


class User:
    def __init__(self, user_id: int, is_admin: bool = False, subscribers=None, rating=None):
        self.user_id = user_id
        self.is_admin = is_admin
        self.subscribers = subscribers or []
        self.rating = rating or []

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'is_admin': self.is_admin,
            'subscribers': [subscriber.to_dict() for subscriber in self.subscribers],
            'rating': [rating_item.to_dict() for rating_item in self.rating],
        }

    @classmethod
    def from_dict(cls, data):
        if data is None:
            raise ValueError("Cannot create User from None")

        subscribers = [Chat.from_dict(subscriber) for subscriber in data.get('subscribers', [])]
        rating = [Rating.from_dict(rating_item) for rating_item in data.get('rating', [])]
        return cls(
            user_id=data['user_id'],
            is_admin=data['is_admin'],
            subscribers=subscribers,
            rating=rating
        )


class Room:
    def __init__(self, code: str, host: str, map: Map, game_mode: GameMode, owner: User, chat: Chat, created_at=None):
        self.code = code.upper().strip()
        self.host = host.strip()
        self.map = map
        self.game_mode = game_mode
        self.owner = owner
        self.chat = chat
        self.created_at = created_at or datetime.now()

    def to_dict(self):
        return {
            'code': self.code,
            'host': self.host,
            'map': self.map.value,
            'game_mode': self.game_mode.value,
            'owner': self.owner.to_dict(),
            'chat': self.chat.to_dict(),
            'created_at': self.created_at
        }

    @classmethod
    def from_dict(cls, data):
        if data is None:
            raise ValueError("Cannot create Rooms from None")

        return cls(
            code=data['code'],
            host=data['host'],
            map=Map(data['map']),
            game_mode=GameMode(data['game_mode']),
            owner=User.from_dict(data['owner']),
            chat=Chat.from_dict(data['chat']),
            created_at=data['created_at']
        )
