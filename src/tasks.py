import asyncio
import logging
from aiogram import Bot
from datetime import datetime
from src.notifications import send_notification

logger = logging.getLogger(__name__)

LIFE_TIME = 60 * 60 * 2
NOTIFY_TIME = 60 * 5


# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ
auto_delete_tasks = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
async def auto_delete_room(bot: Bot, room_id, rooms_collection):
    room = rooms_collection.find_one({'_id': room_id})
    if room:
        owner_id = room['owner_id']
        code = room['code']

        rooms_collection.delete_one({'_id': room_id})
        auto_delete_tasks.pop(room_id, None)

        logger.info(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        await send_notification(
            bot,
            owner_id,
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã</b> üîî\n\n"
            f"–í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ —Å –∫–æ–¥–æ–º <code>{code}</code> –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            f"–ù–µ –ø–æ–Ω—è–ª–∏, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ /help –∏ /rules –æ –∫–æ–º–∞–Ω–¥–µ <code>/update</code>."
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
async def send_warning_and_delete(bot: Bot, room_id, delay, rooms_collection):
    if delay > NOTIFY_TIME:
        await asyncio.sleep(delay - NOTIFY_TIME)
        room = rooms_collection.find_one({'_id': room_id})
        if room:
            owner_id = room['owner_id']
            code = room['code']
            await send_notification(
                bot,
                owner_id,
                f"‚è≥ <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã</b> ‚è≥\n\n"
                f"–í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ —Å –∫–æ–¥–æ–º <code>{code}</code> –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {NOTIFY_TIME / 60} –º–∏–Ω—É—Ç.\n\n"
                f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/update</code>."
            )
        await asyncio.sleep(NOTIFY_TIME)
    else:
        await asyncio.sleep(delay)

    await auto_delete_room(bot, room_id, rooms_collection)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è
async def schedule_auto_delete(bot: Bot, room_id, delay, rooms_collection):
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã {room_id} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥")
    await send_warning_and_delete(bot, room_id, delay, rooms_collection)


#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è
def cancel_auto_delete(room_id):
    task = auto_delete_tasks.pop(room_id, None)
    if task:
        task.cancel()
        logger.info(f"–ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã {room_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç.–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —É–¥–∞–ª–∏–ª")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è
async def reschedule_auto_delete(bot: Bot, room_id, rooms_collection):
    cancel_auto_delete(room_id)
    task = asyncio.create_task(schedule_auto_delete(bot, room_id, LIFE_TIME, rooms_collection))
    auto_delete_tasks[room_id] = task
    logger.info(f"–ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã {room_id} –±—ã–ª–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞, —Ç.–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è
async def restore_auto_deletion_tasks(bot: Bot, rooms_collection):
    current_time = datetime.now()
    rooms = rooms_collection.find()
    logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

    for room in rooms:
        created_at = room['created_at']
        elapsed_time = (current_time - created_at).total_seconds()
        remaining_time = LIFE_TIME - elapsed_time

        if remaining_time <= 0:
            rooms_collection.delete_one({'_id': room['_id']})
            logger.info(f"–ö–æ–º–Ω–∞—Ç–∞ {room['_id']} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        else:
            task = asyncio.create_task(schedule_auto_delete(bot, room['_id'], remaining_time, rooms_collection))
            auto_delete_tasks[room['_id']] = task
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã {room['_id']} —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥")
